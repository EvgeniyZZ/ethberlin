import * as React from 'react';
import * as RMWC from '@rmwc/types';
declare type IconStrategyT = 'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom';
/** A provider for setting global options in RMWC. */
export interface RMWCProviderProps {
    /** Set the buttons ripple effect globally */
    ripple?: boolean;
    /** Global options for icons */
    icon?: Partial<RMWC.IconOptions>;
    /** Children to render */
    children?: React.ReactNode;
}
export interface DeprecatedRMWCProviderPropsT {
    /** DEPRECATED: Ripples for all components are now controlled by the providers ripple prop */
    buttonDefaultRipple?: boolean;
    /** DEPRECATED: Ripples for all components are now controlled by the providers ripple prop */
    listItemDefaultRipple?: boolean;
    /** DEPRECATED: Use the 'icon' prop. icon={{basename: 'material-icons'}} */
    iconClassNameBase?: string;
    /** DEPRECATED: Use the 'icon' prop. icon={{prefix: 'glyphicons-'}} */
    iconClassNamePrefix?: string;
    /** DEPRECATED: Use the 'icon' prop. icon={{strategy: 'className'}} */
    iconStrategy?: IconStrategyT;
    /** DEPRECATED: Use the 'icon' prop. icon={{render: () => <div />}} */
    iconRender?: (props: {
        content: React.ReactNode;
        className: string;
    }) => React.ReactNode;
}
export interface WithProviderContext {
    providerContext: RMWCProviderProps;
}
export declare const ProviderContext: React.Context<RMWCProviderProps>;
export declare const withProviderContext: () => <P extends {}>(Component: React.ComponentType<P & WithProviderContext>) => React.ComponentType<P & Partial<WithProviderContext>>;
/** A provider for setting global options in RMWC. */
export declare const RMWCProvider: ({ children, iconClassNameBase, iconClassNamePrefix, iconStrategy, iconRender, ...rest }: RMWCProviderProps & DeprecatedRMWCProviderPropsT) => JSX.Element;
export {};
