{"ast":null,"code":"var _jsxFileName = \"/home/skale/ethberlin/dApp/ethberlin/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport 'material-components-web/dist/material-components-web.min.css';\nimport '@material/button/dist/mdc.button.css';\nimport { Button } from '@rmwc/button';\nimport { TextField } from '@rmwc/textfield';\nimport Web3 from 'web3';\nimport InputField from './inputField.js';\n\nconst Filestorage = require('@skalenetwork/filestorage.js/src/index');\n\nrequire('dotenv').config();\n\nlet privateKey = process.env.PK;\nlet account = process.env.ADDRESS;\nlet endpoint = process.env.ENDPOINT;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addressFrom: '',\n      addressTo: '',\n      uploadedImage: '',\n      result: '',\n      Amount: ''\n    };\n    this.updateAddressFrom = this.updateAddressFrom.bind(this);\n    this.updateAddressTo = this.updateAddressTo.bind(this);\n    this.upload = this.upload.bind(this);\n    this.updateAmount = this.updateAmount.bind(this);\n    this.getResult = this.getResult.bind(this);\n  }\n\n  updateAddressFrom(address) {\n    this.setState({\n      'addressFrom': address\n    });\n  }\n\n  updateAddressTo(address) {\n    this.setState({\n      'addressTo': address\n    });\n  }\n\n  updateAmount(address) {\n    this.setState({\n      'addressFrom': address\n    });\n  }\n\n  getResult() {\n    this.setState({\n      'result': this.state.addressFrom + \"->\" + this.state.addressTo\n    });\n  }\n\n  async upload(event) {\n    event.preventDefault(); //create web3 connection\n\n    const web3Provider = new Web3.providers.HttpProvider( //      \"http://ethberlin01.skalenodes.com:10145\"\n    endpoint);\n    let web3 = new Web3(web3Provider); //get filestorage instance\n\n    let filestorage = new Filestorage(web3Provider, true); //provide your account & private key\n    //note this must include the 0x prefix\n    //get file data from file upload input field\n\n    let file = document.getElementById('files').files[0];\n    let reader = new FileReader();\n    console.log(endpoint, privateKey, account); //file storage method to upload file\n\n    let self = this;\n\n    reader.onload = async function (e) {\n      console.log(reader.result);\n      const arrayBuffer = reader.result;\n      const bytes = new Uint8Array(arrayBuffer);\n      let conv = btoa(String.fromCharCode.apply(null, bytes));\n      self.setState({\n        uploadedImage: \"data:image/png;base64,\" + conv\n      });\n      const bytes1 = new Uint8Array(arrayBuffer);\n      let link = await filestorage.uploadFile(account, 'bb', bytes1, privateKey);\n      console.log(link);\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      address: this.state.addressFrom,\n      updateAddress: this.updateAddressFrom,\n      placeholder: \"Enter address from\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(InputField, {\n      address: this.state.addressTo,\n      updateAddress: this.updateAddressTo,\n      placeholder: \"Enter address to\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      onChange: e => this.upload(e),\n      type: \"file\",\n      id: \"files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Button, {\n      label: \"Send\",\n      onClick: this.getResult,\n      raised: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"addressFrom: \", this.state.addressFrom), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"addressTo: \", this.state.addressTo), React.createElement(\"img\", {\n      id: \"ItemPreview\",\n      style: {\n        maxWidth: \"200px\"\n      },\n      src: this.state.uploadedImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Result: \", this.state.result)));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/skale/ethberlin/dApp/ethberlin/src/App.js"],"names":["React","Button","TextField","Web3","InputField","Filestorage","require","config","privateKey","process","env","PK","account","ADDRESS","endpoint","ENDPOINT","App","Component","constructor","props","state","addressFrom","addressTo","uploadedImage","result","Amount","updateAddressFrom","bind","updateAddressTo","upload","updateAmount","getResult","address","setState","event","preventDefault","web3Provider","providers","HttpProvider","web3","filestorage","file","document","getElementById","files","reader","FileReader","console","log","self","onload","e","arrayBuffer","bytes","Uint8Array","conv","btoa","String","fromCharCode","apply","bytes1","link","uploadFile","readAsArrayBuffer","render","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'material-components-web/dist/material-components-web.min.css';\nimport '@material/button/dist/mdc.button.css';\n\nimport { Button } from '@rmwc/button';\nimport { TextField } from '@rmwc/textfield';\nimport Web3 from 'web3';\n\nimport InputField from './inputField.js';\n\nconst Filestorage = require('@skalenetwork/filestorage.js/src/index');\nrequire('dotenv').config();\n\nlet privateKey = process.env.PK;\nlet account = process.env.ADDRESS;\nlet endpoint = process.env.ENDPOINT;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        addressFrom: '',\n        addressTo: '',\n        uploadedImage: '',\n        result: '',\n        Amount: ''\n\n    }\n    this.updateAddressFrom = this.updateAddressFrom.bind(this);\n    this.updateAddressTo = this.updateAddressTo.bind(this);\n    this.upload = this.upload.bind(this);\n    this.updateAmount = this.updateAmount.bind(this);\n    this.getResult = this.getResult.bind(this);\n\n  };\n\n\n   updateAddressFrom(address){\n    this.setState({'addressFrom': address});\n   }\n\n\n   updateAddressTo(address){\n    this.setState({'addressTo': address});\n   }\n\n   updateAmount(address){\n    this.setState({'addressFrom': address});\n   }\n\n\n   getResult(){\n    this.setState({'result': this.state.addressFrom + \"->\" + this.state.addressTo});\n   }\n\n\n   async upload(event){\n      event.preventDefault();\n      //create web3 connection\n      const web3Provider = new Web3.providers.HttpProvider(\n//      \"http://ethberlin01.skalenodes.com:10145\"\n        endpoint\n      );\n      let web3 = new Web3(web3Provider);\n\n      //get filestorage instance\n      let filestorage = new Filestorage(web3Provider, true);\n\n      //provide your account & private key\n      //note this must include the 0x prefix\n\n\n      //get file data from file upload input field\n      let file = document.getElementById('files').files[0];\n      let reader = new FileReader();\n       console.log(endpoint, privateKey, account);\n      //file storage method to upload file\n      let self = this;\n      reader.onload = async function(e) {\n\n        console.log(reader.result);\n\n        const arrayBuffer = reader.result;\n            const bytes = new Uint8Array(arrayBuffer);\n\n           let conv = btoa(String.fromCharCode.apply(null, bytes));\n        self.setState({uploadedImage:  \"data:image/png;base64,\"+conv})\n        const bytes1 = new Uint8Array(arrayBuffer);\n        let link = await filestorage.uploadFile(\n          account,\n          'bb',\n          bytes1,\n          privateKey\n       );\n       console.log(link);\n      };\n      reader.readAsArrayBuffer(file);\n    }\n\n\n\n  render(){\n\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n\n            <InputField address={this.state.addressFrom} updateAddress={this.updateAddressFrom} placeholder='Enter address from' />\n            <InputField address={this.state.addressTo} updateAddress={this.updateAddressTo}  placeholder='Enter address to'  />\n\n\n            <input onChange={(e) => this.upload(e)}\n                type=\"file\" id=\"files\" / >\n\n\n            <Button label=\"Send\" onClick={this.getResult} raised />\n\n            <p>\n                addressFrom: {this.state.addressFrom}\n            </p>\n\n\n            <p>\n                addressTo: {this.state.addressTo}\n            </p>\n\n\n            <img id=\"ItemPreview\" style={{maxWidth: \"200px\"}} src={this.state.uploadedImage} />\n\n            <h2>\n                Result: {this.state.result}\n            </h2>\n\n          </header>\n        </div>\n      );\n\n  }\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}