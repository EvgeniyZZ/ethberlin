{"ast":null,"code":"/**\n * @license\n * SKALE Filestorage-js\n * Copyright (C) 2019-Present SKALE Labs\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n * @file helper.js\n * @date 2019\n */\nconst constants = require('./constants');\n\nconst InvalidCredentialsException = require('../exceptions/InvalidCredentialsException');\n\nconst FilestorageContractException = require('../exceptions/FilestorageContractException');\n\nconst PRIVATE_KEY_REGEX = /^(0x)?[0-9a-f]{64}$/i; // TODO: remove 0 gasPrice\n\nconst Helper = {\n  ensureStartsWith0x(str) {\n    if (str.length < 2) {\n      return false;\n    }\n\n    return str[0] === '0' && str[1] === 'x';\n  },\n\n  addBytesSymbol(str) {\n    if (this.ensureStartsWith0x(str)) return str;\n    return '0x' + str;\n  },\n\n  rmBytesSymbol(str) {\n    if (!this.ensureStartsWith0x(str)) return str;\n    return str.slice(2);\n  },\n\n  bufferToHex(buffer) {\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n  },\n\n  concatBytes32Array(data, outputLength) {\n    return data.map(x => this.rmBytesSymbol(x)).join('').slice(0, outputLength);\n  },\n\n  validatePrivateKey(privateKey) {\n    if (!PRIVATE_KEY_REGEX.test(privateKey)) {\n      throw new InvalidCredentialsException(constants.errorMessages.INVALID_PRIVATEKEY);\n    }\n  },\n\n  async signAndSendTransaction(web3, account, privateKey, transactionData, gas) {\n    let encoded = transactionData.encodeABI();\n    let contractAddress = transactionData._parent._address;\n    let accountFromPrivateKey = web3.eth.accounts.privateKeyToAccount(privateKey).address;\n\n    if (account !== accountFromPrivateKey && account !== this.rmBytesSymbol(accountFromPrivateKey)) {\n      throw new InvalidCredentialsException(constants.errorMessages.INVALID_KEYPAIR);\n    }\n\n    let nonce = await web3.eth.getTransactionCount(account);\n    let tx = {\n      from: account,\n      data: encoded,\n      gas: gas,\n      gasPrice: 0,\n      to: contractAddress,\n      nonce: nonce\n    };\n    let signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n    return await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n  },\n\n  async sendTransaction(web3, account, transactionData, gas) {\n    let nonce = await web3.eth.getTransactionCount(account);\n    return await transactionData.send({\n      from: account,\n      gas: gas,\n      gasPrice: 0,\n      nonce: nonce\n    });\n  },\n\n  async sendTransactionToContract(web3, account, privateKey, transactionData, gas) {\n    let result;\n\n    try {\n      if (typeof privateKey === 'string' && privateKey.length > 0) {\n        if (!this.ensureStartsWith0x(privateKey)) {\n          privateKey = '0x' + privateKey;\n        }\n\n        Helper.validatePrivateKey(privateKey);\n        result = await Helper.signAndSendTransaction(web3, account, privateKey, transactionData, gas);\n      } else {\n        result = await Helper.sendTransaction(web3, account, transactionData, gas);\n      }\n\n      return result;\n    } catch (error) {\n      if (error.message.includes(constants.errorMessages.REVERTED_TRANSACTION)) {\n        let errorMessage = error.message.substr(constants.errorMessages.REVERTED_TRANSACTION.length);\n        let revertReason = JSON.parse(errorMessage).revertReason;\n        if (revertReason) throw new FilestorageContractException(revertReason);else throw new FilestorageContractException(constants.errorMessages.FAILED_TRANSACTION);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n};\nmodule.exports = Helper;","map":null,"metadata":{},"sourceType":"script"}