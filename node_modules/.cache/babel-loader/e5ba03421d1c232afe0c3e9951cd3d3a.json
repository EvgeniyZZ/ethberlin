{"ast":null,"code":"/**\n * @license\n * SKALE Filestorage-js\n * Copyright (C) 2019-Present SKALE Labs\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n * @file FilestorageContract.js\n * @date 2019\n */\nconst constants = require('./common/constants');\n\nconst configJson = require('./contracts_config.json');\n\nconst Helper = require('./common/helper');\n\nconst abi = configJson[constants.FILESTORAGE_CONTRACTNAME]['abi'];\nconst contractAddress = configJson[constants.FILESTORAGE_CONTRACTNAME]['address'];\n\nclass FilestorageContract {\n  /**\n   * Initialization of FilestorageContract - js wrapper for solidity smart contract\n   *\n   * @constructor\n   *\n   * @param {object} web3 - Web3 instance.\n   */\n  constructor(web3) {\n    this.web3 = web3;\n    this.contract = new web3.eth.Contract(abi, contractAddress);\n  }\n  /**\n   * Javascript wrapper for solidity function startUpload. Creates empty file of a preset size on SKALE chain node\n   *\n   * @method startUpload\n   *\n   * @param {string} address - Account address.\n   * @param {string} name - Name of uploaded file.\n   * @param {number} size - Size of uploaded file.\n   * @param {string} [privateKey] - Account private key.\n   * @returns {object} Transaction information\n   */\n\n\n  async startUpload(address, name, size, privateKey = '') {\n    let txData = this.contract.methods.startUpload(name, size);\n    return await Helper.sendTransactionToContract(this.web3, address, privateKey, txData, constants.STANDARD_GAS);\n  }\n  /**\n   * Javascript wrapper for solidity function uploadChunk. Writes chunk to the file to specific position\n   *\n   * @method uploadChunk\n   *\n   * @param {string} address - Account address.\n   * @param {string} name - Name of the file in which chunk will be written.\n   * @param {number} position - Position in the file from which chunk will be written.\n   * @param {string} data - Chunk data in hex format, started with 0x\n   * @param {string} [privateKey] - Account private key.\n   * @returns {object} Transaction information\n   */\n\n\n  async uploadChunk(address, name, position, data, privateKey = '') {\n    let txData = this.contract.methods.uploadChunk(name, position, data);\n    return await Helper.sendTransactionToContract(this.web3, address, privateKey, txData, constants.WRITING_GAS);\n  }\n  /**\n   * Javascript wrapper for solidity function deleteFile. Deletes file from SKALE chain node\n   *\n   * @method deleteFile\n   *\n   * @param {string} address - Account address.\n   * @param {string} name - Name of the file to be deleted.\n   * @param {string} [privateKey] - Account private key.\n   * @returns {object} Transaction information\n   */\n\n\n  async deleteFile(address, name, privateKey = '') {\n    let txData = this.contract.methods.deleteFile(name);\n    return await Helper.sendTransactionToContract(this.web3, address, privateKey, txData, constants.STANDARD_GAS);\n  }\n  /**\n   * Javascript wrapper for solidity function finishUpload. Finishes uploading of the file. Checks whether all\n   * chunks are uploaded correctly\n   *\n   * @method finishUpload\n   *\n   * @param {string} address - Account address.\n   * @param {string} name - Name of uploaded file.\n   * @param {string} [privateKey] - Account private key.\n   * @returns {object} Transaction information\n   */\n\n\n  async finishUpload(address, name, privateKey = '') {\n    let txData = this.contract.methods.finishUpload(name);\n    return await Helper.sendTransactionToContract(this.web3, address, privateKey, txData, constants.WRITING_GAS);\n  }\n  /**\n   * Javascript wrapper for solidity function readChunk. Reads chunk from file from specific position\n   *\n   * @method readChunk\n   *\n   * @param {string} storagePath - Path of the file in Filestorage.\n   * @param {number} position - Position in the file from which chunk will be read.\n   * @param {number} length - Size of read data in bytes.\n   * @returns {Array.<string>} Chunk data splitted into 32 byte hex strings.\n   */\n\n\n  async readChunk(storagePath, position, length) {\n    let result = await this.contract.methods.readChunk(storagePath, position, length).call();\n    return result;\n  }\n  /**\n   * Javascript wrapper for solidity function getFileStatus. Returns status of the file:\n   * 0 - file does not exist,\n   * 1 - file is created but uploading not finished yet,\n   * 2 - file is fully uploaded to Filestorage\n   *\n   * @method getFileStatus\n   *\n   * @param {string} storagePath - Path of the file in Filestorage.\n   * @returns {number} File status\n   */\n\n\n  async getFileStatus(storagePath) {\n    let result = await this.contract.methods.getFileStatus(storagePath).call();\n    return result;\n  }\n  /**\n   * Javascript wrapper for solidity function getFileSize. Get size of the file in bytes\n   *\n   * @method getFileSize\n   *\n   * @param {string} storagePath - Path of the file in Filestorage.\n   * @returns {string} Size of the file in bytes\n   */\n\n\n  async getFileSize(storagePath) {\n    let result = await this.contract.methods.getFileSize(storagePath).call();\n    return result;\n  }\n  /**\n   * Javascript wrapper for solidity function getFileInfoList. Get information about files in Filestorage of the\n   * specific account\n   *\n   * @method getFileInfoList\n   *\n   * @param {string} address - Account address.\n   * @returns {{name:string, size:number, storagePath:string, isChunkUploaded:boolean[]}} - File description.\n   */\n\n\n  async getFileInfoList(address) {\n    let result = await this.contract.methods.getFileInfoList(address).call();\n    return result;\n  }\n\n}\n\nmodule.exports = FilestorageContract;","map":null,"metadata":{},"sourceType":"script"}